# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import info as INFO
import cash as CASH
import reporting as REPORTING
import fxpFunctions as FXP
import markets as MARKETS
import events as EVENTS
import trades as TRADES

event log_price(market:indexed, type, price, amount, timestamp, outcome, trader:indexed)
event log_add_tx(market:indexed, sender, type, price, amount, outcome, tradeid)
event log_fill_tx(market:indexed, sender:indexed, owner:indexed, type, price, amount, tradeid, outcome)
event log_cancel(market:indexed, sender, price, amount, tradeid, outcome, type)

# Trade types
macro BID: 1
macro ASK: 2
# Field counts
macro TRADE_FIELDS: 8
# Boolean success/failure
macro SUCCESS: 1
macro FAILURE: 0
# Error codes
macro INSUFFICIENT_BALANCE: 10
macro TRADE_ALREADY_EXISTS: 21

macro save_trade($type, $amount, $price, $market, $outcome, $branch, $participantNumber):
    trade = [$type, $market, $amount, $price, msg.sender, block.number, $outcome]
    trade_id = sha256(trade, items=7)
    trading_fee = MARKETS.getTradingFee($market)
    cumScale = MARKETS.getCumScale($market)
    fee = fee_percent(trading_fee, $price, $amount, cumScale)
    # Save trade
    if !TRADES.getID(trade_id):
        TRADES.saveTrade(trade_id, $type, $market, $amount, $price, msg.sender, $outcome)
        # Update market
        last_id = MARKETS.getLastTrade($market)
        MARKETS.addTrade($market, trade_id, last_id)
        
        # Update available and trading amounts for asks
        if $type == ASK:
            MARKETS.modifyParticipantShares($branch, $market, $participantNumber, $outcome, -$amount)
            CASH.send($branch, ($amount * $price / 2**64 * fee /2**64)/2)
            CASH.send(INFO.getCreator($market), ($amount * $price / 2**64 * fee /2**64)/2)

        # Send / escrow cash for bids
        if $type == BID:
            CASH.send($market, $amount * $price / 2**64)
            CASH.send($branch, ($amount * $price / 2**64 * fee /2**64)/2)
            CASH.send(INFO.getCreator($market), ($amount * $price / 2**64 * fee /2**64)/2)
    else:
        return(TRADE_ALREADY_EXISTS)

    log(type=log_add_tx, $market, msg.sender, $type, $price, $amount, $outcome, trade_id)

    return(trade_id)

#
# Cancellation
#
# 200k gas
def cancel(trade_id):
    # user can cancel anytime
    # Get trade
    trade = array(9)
    trade = TRADES.get_trade(trade_id, outitems=9)
    if !trade:
        return(0)

    type = trade[1]
    amount = trade[3]
    price = trade[4]
    owner = trade[5]
    # Get market
    market = trade[2]
    creator = INFO.getCreator(market)
    if(msg.sender == creator || tx.origin == creator):
        return(-30)
    outcome = trade[8]
    branch = MARKETS.getBranchID(market)
    trading_fee = MARKETS.getTradingFee(market)
    cumScale = MARKETS.getCumScale(market)
    fee = fee_percent(trading_fee, price, amount, cumScale)
    # Check the owner
    if msg.sender == owner:
        # Clear the trade first
        remove_trade(trade_id, market)

        # Issue refunds
        if type == BID:
            # cash refund
            CASH.subtractCash(market, amount * price / 2**64)
            CASH.subtractCash(branch, (amount * price / 2**64 * fee / 2**64)/2)
            CASH.subtractCash(INFO.getCreator(market), (amount * price / 2**64 * fee / 2**64)/2)
            CASH.addCash(msg.sender, (amount * price / 2**64 + (amount * price / 2**64 * fee / 2**64)))

        elif type == ASK:
            # shares refund
            participantNumber = MARKETS.getParticipantNumber(market, msg.sender)
            branch = MARKETS.getBranchID(market)
            MARKETS.modifyParticipantShares(branch, market, participantNumber, outcome, amount)
            CASH.subtractCash(branch, (amount * price / 2**64 * fee / 2**64)/2)
            CASH.subtractCash(INFO.getCreator(market), (amount * price / 2**64 * fee / 2**64)/2)
            CASH.addCash(msg.sender, (amount * price / 2**64 * fee / 2**64))

        
        # Log cancellation
        log(type=log_cancel, market, msg.sender, price, amount, trade_id, outcome, type)
        return(SUCCESS)
    return(FAILURE)

macro remove_trade($trade_id, $market_id):
    TRADES.remove_trade(trade_id)
    
    MARKETS.remove_trade_from_market(market_id, trade_id)


#
# Buy / Sell actions
# Errors:
    # -1: amount/price bad or no market
    # -2: oracle only branch
    # -3: bad outcome to trade
    # -4: not enough money or shares
#
# costs 532k
def buy(amount, price, market, outcome):
    creator = INFO.getCreator(market)
    if(msg.sender == creator || tx.origin == creator):
        return(-30)
    if(amount <= 0 or price <= 0 or market==0 or price*amount < 2**64):
        return(-1)
    if(!MARKETS.scheduleSet(market)):
        return(0)
    branch = MARKETS.getBranchID(market)
    if(BRANCHES.getOracleOnly(branch)):
        return(-2)
    if(outcome > MARKETS.getMarketNumOutcomes(market) or outcome < 1):
        return(-3)
    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)
    # if participant doesn't exist in market, add them
    if(tx.origin != MARKETS.getParticipantID(market, participantNumber)):
        participantNumber = MARKETS.addParticipant(market, tx.origin)
    trading_fee = MARKETS.getTradingFee(market)
    cumScale = MARKETS.getCumScale(market)
    fee = fee_percent(trading_fee, price, amount, cumScale)
    if(CASH.balance(tx.origin) < (amount * price / 2**64 *(fee + 2^64)/2^64)):
        return(-4)
    save_trade(BID, amount, price, market, outcome, branch, participantNumber)
    return(FAILURE)

# cost 532k
def sell(amount, price, market_id, outcome):
    creator = INFO.getCreator(market_id)
    if(msg.sender == creator || tx.origin == creator):
        return(-30)
    if(amount <= 0 or price <= 0 or market_id==0 or price*amount < 2**64):
        return(-1)
    branch = MARKETS.getBranchID(market)
    if(BRANCHES.getOracleOnly(branch)):
        return(-2)
    if(outcome > MARKETS.getMarketNumOutcomes(market_id) or outcome < 1):
        return(-3)
    participantNumber = MARKETS.getParticipantNumber(market_id, tx.origin)
    if (MARKETS.getParticipantID(market_id, participantNumber) != tx.origin):
        return(-3)
    if (MARKETS.getParticipantSharesPurchased(market_id, participantNumber, outcome) < amount):
        return(-4)
    trading_fee = MARKETS.getTradingFee(market_id)
    cumScale = MARKETS.getCumScale(market_id)
    fee = fee_percent(trading_fee, price, amount, cumScale)
    if(CASH.balance(tx.origin) < (amount * price / 2**64 *fee/2^64)):
        return(-4)
    save_trade(ASK, amount, price, market_id, outcome, branch, participantNumber)
    return(FAILURE)

#
# Trade
#
# Errors:
    # -1: oracle only branch
    # -2: bad trade hash
    # -3: trader doesn't exist / own shares in this market
    # -4: market closed
#Exchange(Market, outcome, sender, amount, receiver, payment) â€“ transfers amount shares from sender to receiver for payment amount
#max value is max amount to spend to buy
#max amount is max shares to sell
# 500k gas
def trade(max_value, max_amount, trade_ids:arr):
    if(BRANCHES.getOracleOnly(branch)):
        return(-1)
    if(MARKETS.getOneWinningOutcome(market, 0)):
        return(-4)
    i = 0
    trades = 0
    while i < len(trade_ids):
        trades += trade_ids[i]
        i+=1
    tradeInfo = array(3)
    tradeInfo[0] = trades
    tradeInfo[1] = max_amount
    tradeInfo[2] = max_value
    tradeHash = sha256(tradeInfo, items=3)
    if(TRADES.checkHash(tradeHash)==-1):
        return(-2)
    TRADES.zeroHash()
    max_value = max_value
    max_amount = max_amount
    # Try to fulfill each trade passed
    t = 0
    while t < len(trade_ids):
        trade_id = trade_ids[t]
        # Get trade
        trade = array(9)
        trade = TRADES.get_trade(trade_id, outitems=9)
        if !trade:
            return(0)
        # Get market
        type = trade[1]
        market_id = trade[2]
        if(!MARKETS.scheduleSet(market_id)):
            return(0)
        creator = INFO.getCreator(market_id)
        if(msg.sender == creator || tx.origin == creator):
            return(-30)
        amount = trade[3]
        price = trade[4]
        owner = trade[5]
        outcome = trade[8]
        if(owner == msg.sender or owner == tx.origin):
            return(0)
        # Make sure the trade has been mined, obvious HFT prevention
        if block.number <= self.trades[trade_id].block:
            return(TRADE_SAME_BLOCK_PROHIBITED)
        branch = MARKETS.getBranchID(market_id)
        creator = INFO.getCreator(market_id)
        
        trading_fee = MARKETS.getTradingFee(market_id)
        cumScale = MARKETS.getCumScale(market_id)
        fee = fee_percent(trading_fee, price, amount, cumScale)

        # Fill buy order
        if type == BID:
            # Get available balance of shares
            participantNumber = MARKETS.getParticipantNumber(market_id, tx.origin)
            balance = MARKETS.getParticipantSharesPurchased(market_id, participantNumber, outcome)
            if balance > 0:
                if (MARKETS.getParticipantID(market_id, participantNumber) != tx.origin):
                    return(-3)
                # Determine fill amount
                fill = min(amount, min(balance, max_amount))
                # Calculate value
                value = (fill * price)/2**64
                # Update trade amount or remove
                if fill < amount:
                    TRADES.fill_trade(trade_id, fill)
                else:
                    remove_trade(trade_id, market_id)
                # Update balances
                MARKETS.modifyParticipantShares(branch, market_id, msg.sender, outcome, -fill)
                MARKETS.modifyParticipantShares(branch, market_id, owner, outcome, fill)
                # Transfer cash from person who bid to the person here who is selling [bidder has already sent/escrowed the cash to/with the market when submitting bid]
                fee = value * fee / 2**64
                CASH.addCash(msg.sender, value-fee)
                CASH.addCash(branch, fee/2)
                CASH.addCash(creator, fee/2)
                CASH.subtractCash(market_id, value)
                # seller then pays a fee here
                # Update max_amount
                max_amount -= fill
                # Log transaction
                log(type=log_fill_tx, market_id, msg.sender, owner, ASK, price, fill, trade_id, outcome)
            else:
                return(INSUFFICIENT_BALANCE)

        elif type == ASK:
            max_value = min(CASH.balance(msg.sender), max_value)
            if max_value > 0:
                # Calculate value of trade
                trade_value = amount * price / 2**64
                # Determine fill value
                value = min(max_value, trade_value)
                fee = trade_value * fee / 2**64
                if(CASH.balance(tx.origin) < (trade_value + fee)):
                    return(INSUFFICIENT_BALANCE)
                # Calculate fill amount, update trade amount or remove filled trade
                if value < trade_value:
                    fill = value*2**64 / price
                    TRADES.fill_trade(trade_id, fill)
                else:
                    fill = amount
                    remove_trade(trade_id, market_id)
                participantNumber = MARKETS.getParticipantNumber(market_id, tx.origin)
                # if participant doesn't exist in market, add them
                if(tx.origin != MARKETS.getParticipantID(market_id, participantNumber)):
                    participantNumber = MARKETS.addParticipant(market_id, tx.origin)
                # Update balances [user asking has already gotten rid of shares in escrow, just need to add them to the buyer]
                MARKETS.modifyParticipantShares(branch, market_id, msg.sender, outcome, fill)
                # Transfer cash from user to person who has ask order and pay fee to branch and market creator
                cost = value + fee
                CASH.addCash(owner, value)
                CASH.subtractCash(msg.sender, cost)
                CASH.addCash(branch, fee/2)
                CASH.addCash(creator, fee/2)
                # Update max_value
                max_value -= value
                # Log transaction
                log(type=log_fill_tx, market_id, msg.sender, owner, BID, price, fill, trade_id, outcome)
            else:
                return(INSUFFICIENT_BALANCE)

        # Update market last price
        MARKETS.set_last_price(market_id, price)
        # Log price, fill amount, type and timestamp
        log(type=log_price, market_id, type, price, fill, block.timestamp, outcome, msg.sender)
        # Next trade
        t += 1
    return([SUCCESS, max_value, max_amount]: arr)

# buys amount of every outcome
# cost 850k gas
def buyCompleteSets(branch, market, amount):
    creator = INFO.getCreator(market)
    if(msg.sender == creator || tx.origin == creator):
        return(-30)
    if(BRANCHES.getOracleOnly(branch)):
        return(-6)
    numEvents = MARKETS.getNumEvents(market)
    events = MARKETS.getMarketEvents(market, outitems=numEvents)
    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    cumScale = MARKETS.getCumScale(market)
    n = 0
    #if event gets pushed back people can still buy / sell
    pushedBack = 0
    while n < numEvents:
        #if(EVENTS.getPushedBack(events[n])==0):
        if(1):
            n += 1
        # pushed back and not resolved
        elif(EVENTS.getOutcome(events[n])==0):
            pushedBack = 1
            n = numEvents
        else:
          n += 1
    ### TODO: check for .99 market here
    if ((BRANCHES.getVotePeriod(branch)>MARKETS.getTradingPeriod(market) && !pushedBack) || MARKETS.getBranchID(market) != branch || !MARKETS.scheduleSet(market)):
        return(-1)
    price = amount*cumScale
    if(CASH.balance(tx.origin) < price):
        return(-3)
        
    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)
    # if participant doesn't exist in market, add them
    if(tx.origin != MARKETS.getParticipantID(market, participantNumber)):
        participantNumber = MARKETS.addParticipant(market, tx.origin)

    i = 0
    # send shares of the event to user address
    while i <= numOutcomes:
        MARKETS.modifyShares(market, i, amount)
        MARKETS.modifyParticipantShares(branch, market, participantNumber, i, amount)
        i += 1
    # send money from user acc. to market address/account
    # cost for shares
    CASH.send(market, price)
    return(1)

    
# sells amount of every outcome [if user owns it]
def sellCompleteSets(branch, market, amount):
    creator = INFO.getCreator(market)
    if(msg.sender == creator || tx.origin == creator):
        return(-30)
    if(BRANCHES.getOracleOnly(branch)):
        return(-6)
    # can trade up until the event has started to be voted on (e.g. currentVotePeriod is >= to the latest expDate/periodLength)
    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)
    numEvents = MARKETS.getNumEvents(market)
    events = MARKETS.getMarketEvents(market, outitems=numEvents)
    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    cumScale = MARKETS.getCumScale(market)
    n = 0
    #if event gets pushed back people can still buy / sell
    pushedBack = 0
    while n < numEvents:
        #if(EVENTS.getPushedBack(events[n])==0):
        if(1):
            n += 1
        # pushed back and not resolved
        elif(EVENTS.getOutcome(events[n])==0):
            pushedBack = 1
            n = numEvents
        else:
          n += 1
    if (MARKETS.getParticipantID(market, participantNumber) != tx.origin || (BRANCHES.getVotePeriod(branch)>MARKETS.getTradingPeriod(market) && !pushedBack) || MARKETS.getBranchID(market) != branch):
        return(-1)

    # these prices are in fixed point
    price = amount*cumScale
    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)
    # remove shares from the user's account
    i = 0
    while i <= numOutcomes:
        if(MARKETS.getParticipantSharesPurchased(market, participantNumber, i) < amount):
            return(-3)
        i += 1
    i = 0
    # send shares of the event to user address
    while i <= numOutcomes:
        MARKETS.modifyShares(market, i, -amount)
        MARKETS.modifyParticipantShares(branch, market, participantNumber, i, -amount)
        i += 1
    
    # send bitcoin from the market to the user acc.
    CASH.subtractCash(market, price)
    CASH.addCash(tx.origin, price)
    return(1)
    
macro fee_percent($market_fee, $price, $amount, $cumScale):
    4 * $market_fee * $price / (2**64*$cumScale) * (2**64-$price/$cumScale) / 2**64
    
#direct short implementation in progress
def directShort(buyOrderID, amount): 
    tradeInfo = TRADES.get_trade(buyOrderID)
    #check that the buyOrderID is valid
    if (!tradeInfo) : 
        return(-1)
    
    #get max shares to short: this is the minimum of buyOrderID amount or the amount you want to short. 
    if (TRADES.get_amount(buyOrderID) < amount):
        amtShort = TRADES.get_amount(buyOrderID)
    else: 
        amtShort = amount;
    
    #check you have sufficient funds to short 
    if ( CASH.balance(msg.sender) < amtShort - amtShort*tradeInfo.get_price(buyOrderID) ):
        return(-2)
    
    #send cash to market
    CASH.send(tradeInfo[2], amtShort - amtShort*tradeInfo.get_price(buyOrderID))
    
    #get shares of everything except the outcome you're shorting
    numEvents = MARKETS.getNumEvents(tradeInfo[2])
    events = MARKETS.getMarketEvents(tradeInfo[2], outitems=numEvents)
    numOutcomes = MARKETS.getMarketNumOutcomes(tradeInfo[2])
    i = 0;
    while i <= numEvents:
        #ensure you're not buying the outcome you're trying to short
        if (n[8] != 
        

        
    
